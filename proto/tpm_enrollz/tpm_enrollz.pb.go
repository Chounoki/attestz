// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        v5.29.3
// source: github.com/openconfig/attestz/proto/tpm_enrollz.proto

package attestz

import (
	common_definitions "github.com/openconfig/attestz/proto/common_definitions"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type GetIdevidCsrRequest_Key int32

const (
	GetIdevidCsrRequest_KEY_UNSPECIFIED GetIdevidCsrRequest_Key = 0
	GetIdevidCsrRequest_KEY_EK          GetIdevidCsrRequest_Key = 1
	GetIdevidCsrRequest_KEY_PPK         GetIdevidCsrRequest_Key = 2
)

// Enum value maps for GetIdevidCsrRequest_Key.
var (
	GetIdevidCsrRequest_Key_name = map[int32]string{
		0: "KEY_UNSPECIFIED",
		1: "KEY_EK",
		2: "KEY_PPK",
	}
	GetIdevidCsrRequest_Key_value = map[string]int32{
		"KEY_UNSPECIFIED": 0,
		"KEY_EK":          1,
		"KEY_PPK":         2,
	}
)

func (x GetIdevidCsrRequest_Key) Enum() *GetIdevidCsrRequest_Key {
	p := new(GetIdevidCsrRequest_Key)
	*p = x
	return p
}

func (x GetIdevidCsrRequest_Key) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetIdevidCsrRequest_Key) Descriptor() protoreflect.EnumDescriptor {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_enumTypes[0].Descriptor()
}

func (GetIdevidCsrRequest_Key) Type() protoreflect.EnumType {
	return &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_enumTypes[0]
}

func (x GetIdevidCsrRequest_Key) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetIdevidCsrRequest_Key.Descriptor instead.
func (GetIdevidCsrRequest_Key) EnumDescriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{6, 0}
}

type GetIakCertRequest struct {
	state                protoimpl.MessageState                   `protogen:"open.v1"`
	ControlCardSelection *common_definitions.ControlCardSelection `protobuf:"bytes,1,opt,name=control_card_selection,json=controlCardSelection,proto3" json:"control_card_selection,omitempty"`
	Nonce                []byte                                   `protobuf:"bytes,2,opt,name=nonce,proto3,oneof" json:"nonce,omitempty"`
	HashAlgo             *common_definitions.Tpm20HashAlgo        `protobuf:"varint,3,opt,name=hash_algo,json=hashAlgo,proto3,enum=openconfig.attestz.Tpm20HashAlgo,oneof" json:"hash_algo,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetIakCertRequest) Reset() {
	*x = GetIakCertRequest{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIakCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIakCertRequest) ProtoMessage() {}

func (x *GetIakCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIakCertRequest.ProtoReflect.Descriptor instead.
func (*GetIakCertRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{0}
}

func (x *GetIakCertRequest) GetControlCardSelection() *common_definitions.ControlCardSelection {
	if x != nil {
		return x.ControlCardSelection
	}
	return nil
}

func (x *GetIakCertRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *GetIakCertRequest) GetHashAlgo() common_definitions.Tpm20HashAlgo {
	if x != nil && x.HashAlgo != nil {
		return *x.HashAlgo
	}
	return common_definitions.Tpm20HashAlgo(0)
}

type GetIakCertResponse struct {
	state          protoimpl.MessageState                  `protogen:"open.v1"`
	ControlCardId  *common_definitions.ControlCardVendorId `protobuf:"bytes,1,opt,name=control_card_id,json=controlCardId,proto3" json:"control_card_id,omitempty"`
	IakCert        string                                  `protobuf:"bytes,2,opt,name=iak_cert,json=iakCert,proto3" json:"iak_cert,omitempty"`
	IdevidCert     string                                  `protobuf:"bytes,3,opt,name=idevid_cert,json=idevidCert,proto3" json:"idevid_cert,omitempty"`
	NonceSignature []byte                                  `protobuf:"bytes,4,opt,name=nonce_signature,json=nonceSignature,proto3,oneof" json:"nonce_signature,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetIakCertResponse) Reset() {
	*x = GetIakCertResponse{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIakCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIakCertResponse) ProtoMessage() {}

func (x *GetIakCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIakCertResponse.ProtoReflect.Descriptor instead.
func (*GetIakCertResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{1}
}

func (x *GetIakCertResponse) GetControlCardId() *common_definitions.ControlCardVendorId {
	if x != nil {
		return x.ControlCardId
	}
	return nil
}

func (x *GetIakCertResponse) GetIakCert() string {
	if x != nil {
		return x.IakCert
	}
	return ""
}

func (x *GetIakCertResponse) GetIdevidCert() string {
	if x != nil {
		return x.IdevidCert
	}
	return ""
}

func (x *GetIakCertResponse) GetNonceSignature() []byte {
	if x != nil {
		return x.NonceSignature
	}
	return nil
}

type RotateOIakCertRequest struct {
	state                protoimpl.MessageState                   `protogen:"open.v1"`
	ControlCardSelection *common_definitions.ControlCardSelection `protobuf:"bytes,1,opt,name=control_card_selection,json=controlCardSelection,proto3" json:"control_card_selection,omitempty"`
	OiakCert             string                                   `protobuf:"bytes,2,opt,name=oiak_cert,json=oiakCert,proto3" json:"oiak_cert,omitempty"`
	OidevidCert          string                                   `protobuf:"bytes,3,opt,name=oidevid_cert,json=oidevidCert,proto3" json:"oidevid_cert,omitempty"`
	SslProfileId         string                                   `protobuf:"bytes,4,opt,name=ssl_profile_id,json=sslProfileId,proto3" json:"ssl_profile_id,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RotateOIakCertRequest) Reset() {
	*x = RotateOIakCertRequest{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateOIakCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateOIakCertRequest) ProtoMessage() {}

func (x *RotateOIakCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateOIakCertRequest.ProtoReflect.Descriptor instead.
func (*RotateOIakCertRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{2}
}

func (x *RotateOIakCertRequest) GetControlCardSelection() *common_definitions.ControlCardSelection {
	if x != nil {
		return x.ControlCardSelection
	}
	return nil
}

func (x *RotateOIakCertRequest) GetOiakCert() string {
	if x != nil {
		return x.OiakCert
	}
	return ""
}

func (x *RotateOIakCertRequest) GetOidevidCert() string {
	if x != nil {
		return x.OidevidCert
	}
	return ""
}

func (x *RotateOIakCertRequest) GetSslProfileId() string {
	if x != nil {
		return x.SslProfileId
	}
	return ""
}

type RotateOIakCertResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotateOIakCertResponse) Reset() {
	*x = RotateOIakCertResponse{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateOIakCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateOIakCertResponse) ProtoMessage() {}

func (x *RotateOIakCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateOIakCertResponse.ProtoReflect.Descriptor instead.
func (*RotateOIakCertResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{3}
}

type RotateAIKCertRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*RotateAIKCertRequest_IssuerPublicKey
	//	*RotateAIKCertRequest_IssuerCertPayload_
	//	*RotateAIKCertRequest_Finalize
	Value                isRotateAIKCertRequest_Value             `protobuf_oneof:"value"`
	ControlCardSelection *common_definitions.ControlCardSelection `protobuf:"bytes,4,opt,name=control_card_selection,json=controlCardSelection,proto3" json:"control_card_selection,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *RotateAIKCertRequest) Reset() {
	*x = RotateAIKCertRequest{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateAIKCertRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateAIKCertRequest) ProtoMessage() {}

func (x *RotateAIKCertRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateAIKCertRequest.ProtoReflect.Descriptor instead.
func (*RotateAIKCertRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{4}
}

func (x *RotateAIKCertRequest) GetValue() isRotateAIKCertRequest_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RotateAIKCertRequest) GetIssuerPublicKey() []byte {
	if x != nil {
		if x, ok := x.Value.(*RotateAIKCertRequest_IssuerPublicKey); ok {
			return x.IssuerPublicKey
		}
	}
	return nil
}

func (x *RotateAIKCertRequest) GetIssuerCertPayload() *RotateAIKCertRequest_IssuerCertPayload {
	if x != nil {
		if x, ok := x.Value.(*RotateAIKCertRequest_IssuerCertPayload_); ok {
			return x.IssuerCertPayload
		}
	}
	return nil
}

func (x *RotateAIKCertRequest) GetFinalize() bool {
	if x != nil {
		if x, ok := x.Value.(*RotateAIKCertRequest_Finalize); ok {
			return x.Finalize
		}
	}
	return false
}

func (x *RotateAIKCertRequest) GetControlCardSelection() *common_definitions.ControlCardSelection {
	if x != nil {
		return x.ControlCardSelection
	}
	return nil
}

type isRotateAIKCertRequest_Value interface {
	isRotateAIKCertRequest_Value()
}

type RotateAIKCertRequest_IssuerPublicKey struct {
	IssuerPublicKey []byte `protobuf:"bytes,1,opt,name=issuer_public_key,json=issuerPublicKey,proto3,oneof"`
}

type RotateAIKCertRequest_IssuerCertPayload_ struct {
	IssuerCertPayload *RotateAIKCertRequest_IssuerCertPayload `protobuf:"bytes,2,opt,name=issuer_cert_payload,json=issuerCertPayload,proto3,oneof"`
}

type RotateAIKCertRequest_Finalize struct {
	Finalize bool `protobuf:"varint,3,opt,name=finalize,proto3,oneof"`
}

func (*RotateAIKCertRequest_IssuerPublicKey) isRotateAIKCertRequest_Value() {}

func (*RotateAIKCertRequest_IssuerCertPayload_) isRotateAIKCertRequest_Value() {}

func (*RotateAIKCertRequest_Finalize) isRotateAIKCertRequest_Value() {}

type RotateAIKCertResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Value:
	//
	//	*RotateAIKCertResponse_ApplicationIdentityRequest
	//	*RotateAIKCertResponse_AikCert
	Value         isRotateAIKCertResponse_Value           `protobuf_oneof:"value"`
	ControlCardId *common_definitions.ControlCardVendorId `protobuf:"bytes,3,opt,name=control_card_id,json=controlCardId,proto3" json:"control_card_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RotateAIKCertResponse) Reset() {
	*x = RotateAIKCertResponse{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateAIKCertResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateAIKCertResponse) ProtoMessage() {}

func (x *RotateAIKCertResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateAIKCertResponse.ProtoReflect.Descriptor instead.
func (*RotateAIKCertResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{5}
}

func (x *RotateAIKCertResponse) GetValue() isRotateAIKCertResponse_Value {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *RotateAIKCertResponse) GetApplicationIdentityRequest() []byte {
	if x != nil {
		if x, ok := x.Value.(*RotateAIKCertResponse_ApplicationIdentityRequest); ok {
			return x.ApplicationIdentityRequest
		}
	}
	return nil
}

func (x *RotateAIKCertResponse) GetAikCert() string {
	if x != nil {
		if x, ok := x.Value.(*RotateAIKCertResponse_AikCert); ok {
			return x.AikCert
		}
	}
	return ""
}

func (x *RotateAIKCertResponse) GetControlCardId() *common_definitions.ControlCardVendorId {
	if x != nil {
		return x.ControlCardId
	}
	return nil
}

type isRotateAIKCertResponse_Value interface {
	isRotateAIKCertResponse_Value()
}

type RotateAIKCertResponse_ApplicationIdentityRequest struct {
	ApplicationIdentityRequest []byte `protobuf:"bytes,1,opt,name=application_identity_request,json=applicationIdentityRequest,proto3,oneof"`
}

type RotateAIKCertResponse_AikCert struct {
	AikCert string `protobuf:"bytes,2,opt,name=aik_cert,json=aikCert,proto3,oneof"`
}

func (*RotateAIKCertResponse_ApplicationIdentityRequest) isRotateAIKCertResponse_Value() {}

func (*RotateAIKCertResponse_AikCert) isRotateAIKCertResponse_Value() {}

type GetIdevidCsrRequest struct {
	state                protoimpl.MessageState                   `protogen:"open.v1"`
	ControlCardSelection *common_definitions.ControlCardSelection `protobuf:"bytes,1,opt,name=control_card_selection,json=controlCardSelection,proto3" json:"control_card_selection,omitempty"`
	Key                  GetIdevidCsrRequest_Key                  `protobuf:"varint,2,opt,name=key,proto3,enum=openconfig.attestz.GetIdevidCsrRequest_Key" json:"key,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *GetIdevidCsrRequest) Reset() {
	*x = GetIdevidCsrRequest{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIdevidCsrRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdevidCsrRequest) ProtoMessage() {}

func (x *GetIdevidCsrRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdevidCsrRequest.ProtoReflect.Descriptor instead.
func (*GetIdevidCsrRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{6}
}

func (x *GetIdevidCsrRequest) GetControlCardSelection() *common_definitions.ControlCardSelection {
	if x != nil {
		return x.ControlCardSelection
	}
	return nil
}

func (x *GetIdevidCsrRequest) GetKey() GetIdevidCsrRequest_Key {
	if x != nil {
		return x.Key
	}
	return GetIdevidCsrRequest_KEY_UNSPECIFIED
}

type GetIdevidCsrResponse struct {
	state              protoimpl.MessageState                  `protogen:"open.v1"`
	ControlCardId      *common_definitions.ControlCardVendorId `protobuf:"bytes,1,opt,name=control_card_id,json=controlCardId,proto3" json:"control_card_id,omitempty"`
	CsrContents        []byte                                  `protobuf:"bytes,2,opt,name=csr_contents,json=csrContents,proto3" json:"csr_contents,omitempty"`
	IdevidSignatureCsr []byte                                  `protobuf:"bytes,3,opt,name=idevid_signature_csr,json=idevidSignatureCsr,proto3" json:"idevid_signature_csr,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *GetIdevidCsrResponse) Reset() {
	*x = GetIdevidCsrResponse{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetIdevidCsrResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetIdevidCsrResponse) ProtoMessage() {}

func (x *GetIdevidCsrResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetIdevidCsrResponse.ProtoReflect.Descriptor instead.
func (*GetIdevidCsrResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{7}
}

func (x *GetIdevidCsrResponse) GetControlCardId() *common_definitions.ControlCardVendorId {
	if x != nil {
		return x.ControlCardId
	}
	return nil
}

func (x *GetIdevidCsrResponse) GetCsrContents() []byte {
	if x != nil {
		return x.CsrContents
	}
	return nil
}

func (x *GetIdevidCsrResponse) GetIdevidSignatureCsr() []byte {
	if x != nil {
		return x.IdevidSignatureCsr
	}
	return nil
}

type ChallengeRequest struct {
	state                protoimpl.MessageState                   `protogen:"open.v1"`
	ControlCardSelection *common_definitions.ControlCardSelection `protobuf:"bytes,1,opt,name=control_card_selection,json=controlCardSelection,proto3" json:"control_card_selection,omitempty"`
	EncryptedNonce       []byte                                   `protobuf:"bytes,2,opt,name=encrypted_nonce,json=encryptedNonce,proto3" json:"encrypted_nonce,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *ChallengeRequest) Reset() {
	*x = ChallengeRequest{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeRequest) ProtoMessage() {}

func (x *ChallengeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeRequest.ProtoReflect.Descriptor instead.
func (*ChallengeRequest) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{8}
}

func (x *ChallengeRequest) GetControlCardSelection() *common_definitions.ControlCardSelection {
	if x != nil {
		return x.ControlCardSelection
	}
	return nil
}

func (x *ChallengeRequest) GetEncryptedNonce() []byte {
	if x != nil {
		return x.EncryptedNonce
	}
	return nil
}

type ChallengeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nonce         []byte                 `protobuf:"bytes,2,opt,name=nonce,proto3" json:"nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChallengeResponse) Reset() {
	*x = ChallengeResponse{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChallengeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeResponse) ProtoMessage() {}

func (x *ChallengeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeResponse.ProtoReflect.Descriptor instead.
func (*ChallengeResponse) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{9}
}

func (x *ChallengeResponse) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type RotateAIKCertRequest_IssuerCertPayload struct {
	state            protoimpl.MessageState `protogen:"open.v1"`
	SymmetricKeyBlob []byte                 `protobuf:"bytes,1,opt,name=symmetric_key_blob,json=symmetricKeyBlob,proto3" json:"symmetric_key_blob,omitempty"`
	AikCertBlob      []byte                 `protobuf:"bytes,2,opt,name=aik_cert_blob,json=aikCertBlob,proto3" json:"aik_cert_blob,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *RotateAIKCertRequest_IssuerCertPayload) Reset() {
	*x = RotateAIKCertRequest_IssuerCertPayload{}
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RotateAIKCertRequest_IssuerCertPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotateAIKCertRequest_IssuerCertPayload) ProtoMessage() {}

func (x *RotateAIKCertRequest_IssuerCertPayload) ProtoReflect() protoreflect.Message {
	mi := &file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotateAIKCertRequest_IssuerCertPayload.ProtoReflect.Descriptor instead.
func (*RotateAIKCertRequest_IssuerCertPayload) Descriptor() ([]byte, []int) {
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP(), []int{4, 0}
}

func (x *RotateAIKCertRequest_IssuerCertPayload) GetSymmetricKeyBlob() []byte {
	if x != nil {
		return x.SymmetricKeyBlob
	}
	return nil
}

func (x *RotateAIKCertRequest_IssuerCertPayload) GetAikCertBlob() []byte {
	if x != nil {
		return x.AikCertBlob
	}
	return nil
}

var File_github_com_openconfig_attestz_proto_tpm_enrollz_proto protoreflect.FileDescriptor

var file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDesc = []byte{
	0x0a, 0x35, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x74, 0x70, 0x6d, 0x5f, 0x65, 0x6e, 0x72, 0x6f, 0x6c, 0x6c,
	0x7a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x1a, 0x3c, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x01, 0x0a, 0x11, 0x47, 0x65,
	0x74, 0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x19, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x43, 0x0a, 0x09, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x7a, 0x2e, 0x54, 0x70, 0x6d, 0x32, 0x30, 0x48, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f,
	0x48, 0x01, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x68, 0x61,
	0x73, 0x68, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x22, 0xe3, 0x01, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x49,
	0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f,
	0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x61, 0x6b, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64,
	0x65, 0x76, 0x69, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x69, 0x64, 0x65, 0x76, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x12, 0x2c, 0x0a, 0x0f, 0x6e,
	0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01, 0x01, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xdd, 0x01,
	0x0a, 0x15, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x69, 0x61, 0x6b, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x69, 0x61, 0x6b,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x69, 0x64, 0x65, 0x76, 0x69, 0x64, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6f, 0x69, 0x64, 0x65,
	0x76, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x73, 0x73, 0x6c, 0x5f, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x73, 0x73, 0x6c, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x49, 0x64, 0x22, 0x18, 0x0a,
	0x16, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x4f, 0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xa0, 0x03, 0x0a, 0x14, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x49, 0x4b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2c, 0x0a, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0f, 0x69,
	0x73, 0x73, 0x75, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x6c,
	0x0a, 0x13, 0x69, 0x73, 0x73, 0x75, 0x65, 0x72, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a,
	0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x49, 0x4b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x69, 0x73, 0x73, 0x75, 0x65,
	0x72, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1c, 0x0a, 0x08,
	0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00,
	0x52, 0x08, 0x66, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72,
	0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x65, 0x0a, 0x11, 0x49, 0x73,
	0x73, 0x75, 0x65, 0x72, 0x43, 0x65, 0x72, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x2c, 0x0a, 0x12, 0x73, 0x79, 0x6d, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x73, 0x79, 0x6d,
	0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x42, 0x6c, 0x6f, 0x62, 0x12, 0x22, 0x0a,
	0x0d, 0x61, 0x69, 0x6b, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x62, 0x6c, 0x6f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x61, 0x69, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x42, 0x6c, 0x6f,
	0x62, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xd2, 0x01, 0x0a, 0x15, 0x52,
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x49, 0x4b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x08, 0x61, 0x69, 0x6b, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x61, 0x69,
	0x6b, 0x43, 0x65, 0x72, 0x74, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c,
	0x43, 0x61, 0x72, 0x64, 0x49, 0x64, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0xe9, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x76, 0x69, 0x64, 0x43, 0x73, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65,
	0x76, 0x69, 0x64, 0x43, 0x73, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4b, 0x65,
	0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x33, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x0a,
	0x0f, 0x4b, 0x45, 0x59, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x59, 0x5f, 0x45, 0x4b, 0x10, 0x01, 0x12, 0x0b,
	0x0a, 0x07, 0x4b, 0x45, 0x59, 0x5f, 0x50, 0x50, 0x4b, 0x10, 0x02, 0x22, 0xbc, 0x01, 0x0a, 0x14,
	0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x76, 0x69, 0x64, 0x43, 0x73, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f,
	0x63, 0x61, 0x72, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73,
	0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43,
	0x61, 0x72, 0x64, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x73, 0x72, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x63, 0x73, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x64, 0x65, 0x76,
	0x69, 0x64, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x63, 0x73, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x12, 0x69, 0x64, 0x65, 0x76, 0x69, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x43, 0x73, 0x72, 0x22, 0x9b, 0x01, 0x0a, 0x10, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x5e, 0x0a, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x43, 0x61, 0x72, 0x64, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c,
	0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x32, 0x80, 0x04, 0x0a, 0x11, 0x54, 0x70, 0x6d, 0x45, 0x6e, 0x72, 0x6f, 0x6c,
	0x6c, 0x7a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5b, 0x0a, 0x0a, 0x47, 0x65, 0x74,
	0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x12, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74,
	0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65,
	0x73, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x67, 0x0a, 0x0e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65,
	0x4f, 0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x12, 0x29, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x65, 0x4f, 0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x4f,
	0x49, 0x61, 0x6b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x68, 0x0a, 0x0d, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x49, 0x4b, 0x43, 0x65, 0x72, 0x74,
	0x12, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74,
	0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x49, 0x4b, 0x43,
	0x65, 0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x41, 0x49, 0x4b, 0x43, 0x65, 0x72, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x61, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x49, 0x64, 0x65, 0x76, 0x69, 0x64, 0x43, 0x73, 0x72, 0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x47,
	0x65, 0x74, 0x49, 0x64, 0x65, 0x76, 0x69, 0x64, 0x43, 0x73, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x47, 0x65, 0x74, 0x49, 0x64, 0x65, 0x76, 0x69,
	0x64, 0x43, 0x73, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x09,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43,
	0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x61, 0x74, 0x74,
	0x65, 0x73, 0x74, 0x7a, 0x2e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x1f, 0x5a, 0x1d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f,
	0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x7a, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescOnce sync.Once
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescData = file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDesc
)

func file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescGZIP() []byte {
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescOnce.Do(func() {
		file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescData = protoimpl.X.CompressGZIP(file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescData)
	})
	return file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDescData
}

var file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_goTypes = []any{
	(GetIdevidCsrRequest_Key)(0),                    // 0: openconfig.attestz.GetIdevidCsrRequest.Key
	(*GetIakCertRequest)(nil),                       // 1: openconfig.attestz.GetIakCertRequest
	(*GetIakCertResponse)(nil),                      // 2: openconfig.attestz.GetIakCertResponse
	(*RotateOIakCertRequest)(nil),                   // 3: openconfig.attestz.RotateOIakCertRequest
	(*RotateOIakCertResponse)(nil),                  // 4: openconfig.attestz.RotateOIakCertResponse
	(*RotateAIKCertRequest)(nil),                    // 5: openconfig.attestz.RotateAIKCertRequest
	(*RotateAIKCertResponse)(nil),                   // 6: openconfig.attestz.RotateAIKCertResponse
	(*GetIdevidCsrRequest)(nil),                     // 7: openconfig.attestz.GetIdevidCsrRequest
	(*GetIdevidCsrResponse)(nil),                    // 8: openconfig.attestz.GetIdevidCsrResponse
	(*ChallengeRequest)(nil),                        // 9: openconfig.attestz.ChallengeRequest
	(*ChallengeResponse)(nil),                       // 10: openconfig.attestz.ChallengeResponse
	(*RotateAIKCertRequest_IssuerCertPayload)(nil),  // 11: openconfig.attestz.RotateAIKCertRequest.IssuerCertPayload
	(*common_definitions.ControlCardSelection)(nil), // 12: openconfig.attestz.ControlCardSelection
	(common_definitions.Tpm20HashAlgo)(0),           // 13: openconfig.attestz.Tpm20HashAlgo
	(*common_definitions.ControlCardVendorId)(nil),  // 14: openconfig.attestz.ControlCardVendorId
}
var file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_depIdxs = []int32{
	12, // 0: openconfig.attestz.GetIakCertRequest.control_card_selection:type_name -> openconfig.attestz.ControlCardSelection
	13, // 1: openconfig.attestz.GetIakCertRequest.hash_algo:type_name -> openconfig.attestz.Tpm20HashAlgo
	14, // 2: openconfig.attestz.GetIakCertResponse.control_card_id:type_name -> openconfig.attestz.ControlCardVendorId
	12, // 3: openconfig.attestz.RotateOIakCertRequest.control_card_selection:type_name -> openconfig.attestz.ControlCardSelection
	11, // 4: openconfig.attestz.RotateAIKCertRequest.issuer_cert_payload:type_name -> openconfig.attestz.RotateAIKCertRequest.IssuerCertPayload
	12, // 5: openconfig.attestz.RotateAIKCertRequest.control_card_selection:type_name -> openconfig.attestz.ControlCardSelection
	14, // 6: openconfig.attestz.RotateAIKCertResponse.control_card_id:type_name -> openconfig.attestz.ControlCardVendorId
	12, // 7: openconfig.attestz.GetIdevidCsrRequest.control_card_selection:type_name -> openconfig.attestz.ControlCardSelection
	0,  // 8: openconfig.attestz.GetIdevidCsrRequest.key:type_name -> openconfig.attestz.GetIdevidCsrRequest.Key
	14, // 9: openconfig.attestz.GetIdevidCsrResponse.control_card_id:type_name -> openconfig.attestz.ControlCardVendorId
	12, // 10: openconfig.attestz.ChallengeRequest.control_card_selection:type_name -> openconfig.attestz.ControlCardSelection
	1,  // 11: openconfig.attestz.TpmEnrollzService.GetIakCert:input_type -> openconfig.attestz.GetIakCertRequest
	3,  // 12: openconfig.attestz.TpmEnrollzService.RotateOIakCert:input_type -> openconfig.attestz.RotateOIakCertRequest
	5,  // 13: openconfig.attestz.TpmEnrollzService.RotateAIKCert:input_type -> openconfig.attestz.RotateAIKCertRequest
	7,  // 14: openconfig.attestz.TpmEnrollzService.GetIdevidCsr:input_type -> openconfig.attestz.GetIdevidCsrRequest
	9,  // 15: openconfig.attestz.TpmEnrollzService.Challenge:input_type -> openconfig.attestz.ChallengeRequest
	2,  // 16: openconfig.attestz.TpmEnrollzService.GetIakCert:output_type -> openconfig.attestz.GetIakCertResponse
	4,  // 17: openconfig.attestz.TpmEnrollzService.RotateOIakCert:output_type -> openconfig.attestz.RotateOIakCertResponse
	6,  // 18: openconfig.attestz.TpmEnrollzService.RotateAIKCert:output_type -> openconfig.attestz.RotateAIKCertResponse
	8,  // 19: openconfig.attestz.TpmEnrollzService.GetIdevidCsr:output_type -> openconfig.attestz.GetIdevidCsrResponse
	10, // 20: openconfig.attestz.TpmEnrollzService.Challenge:output_type -> openconfig.attestz.ChallengeResponse
	16, // [16:21] is the sub-list for method output_type
	11, // [11:16] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_init() }
func file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_init() {
	if File_github_com_openconfig_attestz_proto_tpm_enrollz_proto != nil {
		return
	}
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[0].OneofWrappers = []any{}
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[1].OneofWrappers = []any{}
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[4].OneofWrappers = []any{
		(*RotateAIKCertRequest_IssuerPublicKey)(nil),
		(*RotateAIKCertRequest_IssuerCertPayload_)(nil),
		(*RotateAIKCertRequest_Finalize)(nil),
	}
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes[5].OneofWrappers = []any{
		(*RotateAIKCertResponse_ApplicationIdentityRequest)(nil),
		(*RotateAIKCertResponse_AikCert)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_goTypes,
		DependencyIndexes: file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_depIdxs,
		EnumInfos:         file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_enumTypes,
		MessageInfos:      file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_msgTypes,
	}.Build()
	File_github_com_openconfig_attestz_proto_tpm_enrollz_proto = out.File
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_rawDesc = nil
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_goTypes = nil
	file_github_com_openconfig_attestz_proto_tpm_enrollz_proto_depIdxs = nil
}
